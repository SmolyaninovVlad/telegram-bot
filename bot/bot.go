package bot

import( 
	"fmt"
	"strconv"
	"telegaBot/structers"
	"telegaBot/post"
	"github.com/go-telegram-bot-api/telegram-bot-api"
)

const tgbotapiKey = "901228271:AAGEfVEGO4TXI8sZfmKQPMDYIfNQxPz-Qxs"

var (
	mainMenu = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
			tgbotapi.NewKeyboardButton("üóí –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"),
		),
	)
	requestMenu = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è(–∑–∞–ø—Ä–æ—Å)"),
			tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"),
		),
	)
)

var (
	newRequestMap = make(map[int64]*Structers.NewRequest)
	customFieldFirst = new(Structers.Customf)
	customFieldSecond = new(Structers.Customf)
	bot *tgbotapi.BotAPI
	err error
	updChannel tgbotapi.UpdatesChannel
	update tgbotapi.Update
	updConfig tgbotapi.UpdateConfig
	botUser tgbotapi.User
)

func InitBot() tgbotapi.UpdatesChannel{
	bot, err = tgbotapi.NewBotAPI(tgbotapiKey)
	if err != nil {
		panic("bot init error:" + err.Error())
	}
	botUser, err = bot.GetMe()
	if err != nil {
		panic("bot getMe error:" + err.Error())
	}
	fmt.Printf("auth is ok! Bot is : %s\n", botUser.FirstName)
	updConfig.Timeout = 60
	updConfig.Limit = 1
	updConfig.Offset = 0

	updChannel, err = bot.GetUpdatesChan(updConfig)
	if err != nil {
		panic("updChannel error:" + err.Error())
	}
	return updChannel
}
func InitBotCycle(updChannel tgbotapi.UpdatesChannel) error{
	// –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–¥–º–∞–π–Ω–∞
	customFieldFirst.Id = "3"
	customFieldFirst.Name = "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ-–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä"
	customFieldFirst.Value = "–í–Ω–µ—à–Ω–∏–π –∫–∞–Ω–∞–ª"
	customFieldSecond = new(Structers.Customf)
	customFieldSecond.Id = "6"
	customFieldSecond.Name = "ExternalChannelUserId"
	//–¶–∏–∫–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	for {
		update = <-updChannel
		if update.Message != nil {
			//–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞
			if update.Message.IsCommand(){
				cmdText := update.Message.Command()
				if cmdText == "help" {
					msgConfig := tgbotapi.NewMessage(
						update.Message.Chat.ID,
						"–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç")
					bot.Send(msgConfig)
				} else if cmdText == "menu" {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
					msg.ReplyMarkup = mainMenu
					bot.Send(msg)
				} else if cmdText == "start" {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å:\n/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/help - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n–í–µ–¥—É—Ç—Å—è —Ä–∞–±–æ—Ç—ã...")
					bot.Send(msg)
				} 
			} else {
				switch update.Message.Text {
				case mainMenu.Keyboard[0][0].Text: //–ò–Ω—Ñ–æ (–ì–ª–∞–≤–Ω–∞—è)
					infoMain()
				case mainMenu.Keyboard[0][1].Text: //–ù–æ–≤—ã–π (–ó–∞–ø—Ä–æ—Å)
					newRequest()
				case requestMenu.Keyboard[0][0].Text: // –ò–Ω—Ñ–æ (–ó–∞–ø—Ä–æ—Å)
					infoRequest()
				case requestMenu.Keyboard[0][1].Text: // –û—Ç–º–µ–Ω–∞ (–ó–∞–ø—Ä–æ—Å)
					delete(newRequestMap, update.Message.Chat.ID)
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
					msg.ReplyMarkup = mainMenu
					bot.Send(msg)
				default:
					requestProcessing()
				}
			}
		}

	}
}
func SendMessageToUser(chat_id int64, message string) {
	msgConfig := tgbotapi.NewMessage(chat_id, message)
	bot.Send(msgConfig)
}
func infoMain(){
	message := "–Ø –±–æ—Ç –ü—Ä–∏–º–°–æ—Ü–ë–∞–Ω–∫–∞. –Ø –ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞.\n –í –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –¥–∞–¥—É—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏ —Å–æ–æ–±—â—É –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω."
	msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, message)
	bot.Send(msgConfig)
}
func infoRequest(){
	message := "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–º—É –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ. –í –∫—Ä–æ—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –µ—Å–ª–∏ –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –Ω–∞—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, —è –≤–∞–º —Å–æ–æ–±—â—É\n"
	msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, message)
	bot.Send(msgConfig)
}
func sendQuestion(state int) string {
	var result string
	switch state {
		case 0: result = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É: "
		case 1: result = "–í–≤–µ–¥–∏—Ç–µ –û–ø–∏—Å–∞–Ω–∏–µ: "
		case -1: result = "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"
		case -2: result = "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç\n–ö–æ–≥–¥–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ –±—É–¥—É—Ç –∫–∞–∫–∏–µ-—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - —è –≤–∞–º —Å–æ–æ–±—â—É, –æ–∂–∏–¥–∞–π—Ç–µ"
		case -3: result = "üõ† –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
	}
	return result
}
func newRequest() {
	newRequestMap[update.Message.Chat.ID] = new(Structers.NewRequest)
	//–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
	newRequestMap[update.Message.Chat.ID].State = 0
	//–î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª—è—Ö
	var array []*Structers.Customf
	//–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ –≤–Ω–µ—à–Ω–µ–º –∫–∞–Ω–∞–ª–µ
	array = append(array, customFieldFirst)
	//–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–± –∞–π–¥–∏ —é–∑–µ—Ä–∞
	customFieldSecond.Value = strconv.FormatInt(update.Message.Chat.ID, 10)
	array = append(array, customFieldSecond)
	newRequestMap[update.Message.Chat.ID].Custom_fields = array
	newRequestMap[update.Message.Chat.ID].Project_id = "16"
	newRequestMap[update.Message.Chat.ID].Tracker_id = "2"
	newRequestMap[update.Message.Chat.ID].Status_id = "1"
	newRequestMap[update.Message.Chat.ID].Priority_id = "2"
	msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, sendQuestion(0))
	msgConfig.ReplyMarkup = requestMenu
	// msgConfig. –î–û–ë–ê–í–ò–¢–¨ –£–î–ê–õ–ï–ù–ò–ï –ú–ï–ù–Æ
	bot.Send(msgConfig)
}
func requestProcessing(){
	//–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
	cs, ok := newRequestMap[update.Message.Chat.ID]
	if ok {
		switch cs.State {
			//–ó–∞–ø–æ–ª–Ω–∏–ª–∏ –ø–µ—Ä–≤—ã–π, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤—Ç–æ—Ä–æ–π —à–∞–≥
			case 0: {
				cs.State = 1
				cs.Subject = update.Message.Text
				msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, sendQuestion(cs.State))
				bot.Send(msgConfig)
			}
			//–ó–∞–ø–æ–ª–Ω–∏–ª–∏ –≤—Ç–æ—Ä–æ–π, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ç—Ä–µ—Ç–∏–π —à–∞–≥ (–∫–æ–Ω–µ—Ü)
			case 1: {
				cs.State = -1
				cs.Description = update.Message.Text
				msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, sendQuestion(cs.State))
				// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ
				bot.Send(msgConfig)
				err = post.SendPost(cs)
				if err != nil {
					//–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, —Å–æ–æ–±—å—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
					fmt.Printf("send post error: %v\n", err)
					msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, sendQuestion(-3))
					msgConfig.ReplyMarkup = mainMenu
					bot.Send(msgConfig)
				} else {
					msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, sendQuestion(-2))
					msgConfig.ReplyMarkup = mainMenu
					bot.Send(msgConfig)
				}
				//–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
				delete(newRequestMap, update.Message.Chat.ID)
			}
		}
	} else {
		//Other messages
		// –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
		fmt.Printf("form: %s; message: %s\n", update.Message.From.FirstName, update.Message.Text)
	}
}
